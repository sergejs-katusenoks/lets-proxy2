package proxy

// Code generated by http://github.com/gojuno/minimock (3.0.6). DO NOT EDIT.

//go:generate minimock -i github.com/sergejs-katusenoks/lets-proxy2/internal/proxy.HTTPProxyTest -o ./http_proxy_test_mock_test.go

import (
	"context"
	"net/http"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// HTTPProxyTestMock implements HTTPProxyTest
type HTTPProxyTestMock struct {
	t minimock.Tester

	funcGetContext          func(req *http.Request) (c1 context.Context, err error)
	inspectFuncGetContext   func(req *http.Request)
	afterGetContextCounter  uint64
	beforeGetContextCounter uint64
	GetContextMock          mHTTPProxyTestMockGetContext

	funcHandleHTTPValidation          func(w http.ResponseWriter, r *http.Request) (b1 bool)
	inspectFuncHandleHTTPValidation   func(w http.ResponseWriter, r *http.Request)
	afterHandleHTTPValidationCounter  uint64
	beforeHandleHTTPValidationCounter uint64
	HandleHTTPValidationMock          mHTTPProxyTestMockHandleHTTPValidation
}

// NewHTTPProxyTestMock returns a mock for HTTPProxyTest
func NewHTTPProxyTestMock(t minimock.Tester) *HTTPProxyTestMock {
	m := &HTTPProxyTestMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetContextMock = mHTTPProxyTestMockGetContext{mock: m}
	m.GetContextMock.callArgs = []*HTTPProxyTestMockGetContextParams{}

	m.HandleHTTPValidationMock = mHTTPProxyTestMockHandleHTTPValidation{mock: m}
	m.HandleHTTPValidationMock.callArgs = []*HTTPProxyTestMockHandleHTTPValidationParams{}

	return m
}

type mHTTPProxyTestMockGetContext struct {
	mock               *HTTPProxyTestMock
	defaultExpectation *HTTPProxyTestMockGetContextExpectation
	expectations       []*HTTPProxyTestMockGetContextExpectation

	callArgs []*HTTPProxyTestMockGetContextParams
	mutex    sync.RWMutex
}

// HTTPProxyTestMockGetContextExpectation specifies expectation struct of the HTTPProxyTest.GetContext
type HTTPProxyTestMockGetContextExpectation struct {
	mock    *HTTPProxyTestMock
	params  *HTTPProxyTestMockGetContextParams
	results *HTTPProxyTestMockGetContextResults
	Counter uint64
}

// HTTPProxyTestMockGetContextParams contains parameters of the HTTPProxyTest.GetContext
type HTTPProxyTestMockGetContextParams struct {
	req *http.Request
}

// HTTPProxyTestMockGetContextResults contains results of the HTTPProxyTest.GetContext
type HTTPProxyTestMockGetContextResults struct {
	c1  context.Context
	err error
}

// Expect sets up expected params for HTTPProxyTest.GetContext
func (mmGetContext *mHTTPProxyTestMockGetContext) Expect(req *http.Request) *mHTTPProxyTestMockGetContext {
	if mmGetContext.mock.funcGetContext != nil {
		mmGetContext.mock.t.Fatalf("HTTPProxyTestMock.GetContext mock is already set by Set")
	}

	if mmGetContext.defaultExpectation == nil {
		mmGetContext.defaultExpectation = &HTTPProxyTestMockGetContextExpectation{}
	}

	mmGetContext.defaultExpectation.params = &HTTPProxyTestMockGetContextParams{req}
	for _, e := range mmGetContext.expectations {
		if minimock.Equal(e.params, mmGetContext.defaultExpectation.params) {
			mmGetContext.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetContext.defaultExpectation.params)
		}
	}

	return mmGetContext
}

// Inspect accepts an inspector function that has same arguments as the HTTPProxyTest.GetContext
func (mmGetContext *mHTTPProxyTestMockGetContext) Inspect(f func(req *http.Request)) *mHTTPProxyTestMockGetContext {
	if mmGetContext.mock.inspectFuncGetContext != nil {
		mmGetContext.mock.t.Fatalf("Inspect function is already set for HTTPProxyTestMock.GetContext")
	}

	mmGetContext.mock.inspectFuncGetContext = f

	return mmGetContext
}

// Return sets up results that will be returned by HTTPProxyTest.GetContext
func (mmGetContext *mHTTPProxyTestMockGetContext) Return(c1 context.Context, err error) *HTTPProxyTestMock {
	if mmGetContext.mock.funcGetContext != nil {
		mmGetContext.mock.t.Fatalf("HTTPProxyTestMock.GetContext mock is already set by Set")
	}

	if mmGetContext.defaultExpectation == nil {
		mmGetContext.defaultExpectation = &HTTPProxyTestMockGetContextExpectation{mock: mmGetContext.mock}
	}
	mmGetContext.defaultExpectation.results = &HTTPProxyTestMockGetContextResults{c1, err}
	return mmGetContext.mock
}

//Set uses given function f to mock the HTTPProxyTest.GetContext method
func (mmGetContext *mHTTPProxyTestMockGetContext) Set(f func(req *http.Request) (c1 context.Context, err error)) *HTTPProxyTestMock {
	if mmGetContext.defaultExpectation != nil {
		mmGetContext.mock.t.Fatalf("Default expectation is already set for the HTTPProxyTest.GetContext method")
	}

	if len(mmGetContext.expectations) > 0 {
		mmGetContext.mock.t.Fatalf("Some expectations are already set for the HTTPProxyTest.GetContext method")
	}

	mmGetContext.mock.funcGetContext = f
	return mmGetContext.mock
}

// When sets expectation for the HTTPProxyTest.GetContext which will trigger the result defined by the following
// Then helper
func (mmGetContext *mHTTPProxyTestMockGetContext) When(req *http.Request) *HTTPProxyTestMockGetContextExpectation {
	if mmGetContext.mock.funcGetContext != nil {
		mmGetContext.mock.t.Fatalf("HTTPProxyTestMock.GetContext mock is already set by Set")
	}

	expectation := &HTTPProxyTestMockGetContextExpectation{
		mock:   mmGetContext.mock,
		params: &HTTPProxyTestMockGetContextParams{req},
	}
	mmGetContext.expectations = append(mmGetContext.expectations, expectation)
	return expectation
}

// Then sets up HTTPProxyTest.GetContext return parameters for the expectation previously defined by the When method
func (e *HTTPProxyTestMockGetContextExpectation) Then(c1 context.Context, err error) *HTTPProxyTestMock {
	e.results = &HTTPProxyTestMockGetContextResults{c1, err}
	return e.mock
}

// GetContext implements HTTPProxyTest
func (mmGetContext *HTTPProxyTestMock) GetContext(req *http.Request) (c1 context.Context, err error) {
	mm_atomic.AddUint64(&mmGetContext.beforeGetContextCounter, 1)
	defer mm_atomic.AddUint64(&mmGetContext.afterGetContextCounter, 1)

	if mmGetContext.inspectFuncGetContext != nil {
		mmGetContext.inspectFuncGetContext(req)
	}

	mm_params := &HTTPProxyTestMockGetContextParams{req}

	// Record call args
	mmGetContext.GetContextMock.mutex.Lock()
	mmGetContext.GetContextMock.callArgs = append(mmGetContext.GetContextMock.callArgs, mm_params)
	mmGetContext.GetContextMock.mutex.Unlock()

	for _, e := range mmGetContext.GetContextMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.c1, e.results.err
		}
	}

	if mmGetContext.GetContextMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetContext.GetContextMock.defaultExpectation.Counter, 1)
		mm_want := mmGetContext.GetContextMock.defaultExpectation.params
		mm_got := HTTPProxyTestMockGetContextParams{req}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetContext.t.Errorf("HTTPProxyTestMock.GetContext got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetContext.GetContextMock.defaultExpectation.results
		if mm_results == nil {
			mmGetContext.t.Fatal("No results are set for the HTTPProxyTestMock.GetContext")
		}
		return (*mm_results).c1, (*mm_results).err
	}
	if mmGetContext.funcGetContext != nil {
		return mmGetContext.funcGetContext(req)
	}
	mmGetContext.t.Fatalf("Unexpected call to HTTPProxyTestMock.GetContext. %v", req)
	return
}

// GetContextAfterCounter returns a count of finished HTTPProxyTestMock.GetContext invocations
func (mmGetContext *HTTPProxyTestMock) GetContextAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetContext.afterGetContextCounter)
}

// GetContextBeforeCounter returns a count of HTTPProxyTestMock.GetContext invocations
func (mmGetContext *HTTPProxyTestMock) GetContextBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetContext.beforeGetContextCounter)
}

// Calls returns a list of arguments used in each call to HTTPProxyTestMock.GetContext.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetContext *mHTTPProxyTestMockGetContext) Calls() []*HTTPProxyTestMockGetContextParams {
	mmGetContext.mutex.RLock()

	argCopy := make([]*HTTPProxyTestMockGetContextParams, len(mmGetContext.callArgs))
	copy(argCopy, mmGetContext.callArgs)

	mmGetContext.mutex.RUnlock()

	return argCopy
}

// MinimockGetContextDone returns true if the count of the GetContext invocations corresponds
// the number of defined expectations
func (m *HTTPProxyTestMock) MinimockGetContextDone() bool {
	for _, e := range m.GetContextMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetContextMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetContextCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetContext != nil && mm_atomic.LoadUint64(&m.afterGetContextCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetContextInspect logs each unmet expectation
func (m *HTTPProxyTestMock) MinimockGetContextInspect() {
	for _, e := range m.GetContextMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HTTPProxyTestMock.GetContext with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetContextMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetContextCounter) < 1 {
		if m.GetContextMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to HTTPProxyTestMock.GetContext")
		} else {
			m.t.Errorf("Expected call to HTTPProxyTestMock.GetContext with params: %#v", *m.GetContextMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetContext != nil && mm_atomic.LoadUint64(&m.afterGetContextCounter) < 1 {
		m.t.Error("Expected call to HTTPProxyTestMock.GetContext")
	}
}

type mHTTPProxyTestMockHandleHTTPValidation struct {
	mock               *HTTPProxyTestMock
	defaultExpectation *HTTPProxyTestMockHandleHTTPValidationExpectation
	expectations       []*HTTPProxyTestMockHandleHTTPValidationExpectation

	callArgs []*HTTPProxyTestMockHandleHTTPValidationParams
	mutex    sync.RWMutex
}

// HTTPProxyTestMockHandleHTTPValidationExpectation specifies expectation struct of the HTTPProxyTest.HandleHTTPValidation
type HTTPProxyTestMockHandleHTTPValidationExpectation struct {
	mock    *HTTPProxyTestMock
	params  *HTTPProxyTestMockHandleHTTPValidationParams
	results *HTTPProxyTestMockHandleHTTPValidationResults
	Counter uint64
}

// HTTPProxyTestMockHandleHTTPValidationParams contains parameters of the HTTPProxyTest.HandleHTTPValidation
type HTTPProxyTestMockHandleHTTPValidationParams struct {
	w http.ResponseWriter
	r *http.Request
}

// HTTPProxyTestMockHandleHTTPValidationResults contains results of the HTTPProxyTest.HandleHTTPValidation
type HTTPProxyTestMockHandleHTTPValidationResults struct {
	b1 bool
}

// Expect sets up expected params for HTTPProxyTest.HandleHTTPValidation
func (mmHandleHTTPValidation *mHTTPProxyTestMockHandleHTTPValidation) Expect(w http.ResponseWriter, r *http.Request) *mHTTPProxyTestMockHandleHTTPValidation {
	if mmHandleHTTPValidation.mock.funcHandleHTTPValidation != nil {
		mmHandleHTTPValidation.mock.t.Fatalf("HTTPProxyTestMock.HandleHTTPValidation mock is already set by Set")
	}

	if mmHandleHTTPValidation.defaultExpectation == nil {
		mmHandleHTTPValidation.defaultExpectation = &HTTPProxyTestMockHandleHTTPValidationExpectation{}
	}

	mmHandleHTTPValidation.defaultExpectation.params = &HTTPProxyTestMockHandleHTTPValidationParams{w, r}
	for _, e := range mmHandleHTTPValidation.expectations {
		if minimock.Equal(e.params, mmHandleHTTPValidation.defaultExpectation.params) {
			mmHandleHTTPValidation.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmHandleHTTPValidation.defaultExpectation.params)
		}
	}

	return mmHandleHTTPValidation
}

// Inspect accepts an inspector function that has same arguments as the HTTPProxyTest.HandleHTTPValidation
func (mmHandleHTTPValidation *mHTTPProxyTestMockHandleHTTPValidation) Inspect(f func(w http.ResponseWriter, r *http.Request)) *mHTTPProxyTestMockHandleHTTPValidation {
	if mmHandleHTTPValidation.mock.inspectFuncHandleHTTPValidation != nil {
		mmHandleHTTPValidation.mock.t.Fatalf("Inspect function is already set for HTTPProxyTestMock.HandleHTTPValidation")
	}

	mmHandleHTTPValidation.mock.inspectFuncHandleHTTPValidation = f

	return mmHandleHTTPValidation
}

// Return sets up results that will be returned by HTTPProxyTest.HandleHTTPValidation
func (mmHandleHTTPValidation *mHTTPProxyTestMockHandleHTTPValidation) Return(b1 bool) *HTTPProxyTestMock {
	if mmHandleHTTPValidation.mock.funcHandleHTTPValidation != nil {
		mmHandleHTTPValidation.mock.t.Fatalf("HTTPProxyTestMock.HandleHTTPValidation mock is already set by Set")
	}

	if mmHandleHTTPValidation.defaultExpectation == nil {
		mmHandleHTTPValidation.defaultExpectation = &HTTPProxyTestMockHandleHTTPValidationExpectation{mock: mmHandleHTTPValidation.mock}
	}
	mmHandleHTTPValidation.defaultExpectation.results = &HTTPProxyTestMockHandleHTTPValidationResults{b1}
	return mmHandleHTTPValidation.mock
}

//Set uses given function f to mock the HTTPProxyTest.HandleHTTPValidation method
func (mmHandleHTTPValidation *mHTTPProxyTestMockHandleHTTPValidation) Set(f func(w http.ResponseWriter, r *http.Request) (b1 bool)) *HTTPProxyTestMock {
	if mmHandleHTTPValidation.defaultExpectation != nil {
		mmHandleHTTPValidation.mock.t.Fatalf("Default expectation is already set for the HTTPProxyTest.HandleHTTPValidation method")
	}

	if len(mmHandleHTTPValidation.expectations) > 0 {
		mmHandleHTTPValidation.mock.t.Fatalf("Some expectations are already set for the HTTPProxyTest.HandleHTTPValidation method")
	}

	mmHandleHTTPValidation.mock.funcHandleHTTPValidation = f
	return mmHandleHTTPValidation.mock
}

// When sets expectation for the HTTPProxyTest.HandleHTTPValidation which will trigger the result defined by the following
// Then helper
func (mmHandleHTTPValidation *mHTTPProxyTestMockHandleHTTPValidation) When(w http.ResponseWriter, r *http.Request) *HTTPProxyTestMockHandleHTTPValidationExpectation {
	if mmHandleHTTPValidation.mock.funcHandleHTTPValidation != nil {
		mmHandleHTTPValidation.mock.t.Fatalf("HTTPProxyTestMock.HandleHTTPValidation mock is already set by Set")
	}

	expectation := &HTTPProxyTestMockHandleHTTPValidationExpectation{
		mock:   mmHandleHTTPValidation.mock,
		params: &HTTPProxyTestMockHandleHTTPValidationParams{w, r},
	}
	mmHandleHTTPValidation.expectations = append(mmHandleHTTPValidation.expectations, expectation)
	return expectation
}

// Then sets up HTTPProxyTest.HandleHTTPValidation return parameters for the expectation previously defined by the When method
func (e *HTTPProxyTestMockHandleHTTPValidationExpectation) Then(b1 bool) *HTTPProxyTestMock {
	e.results = &HTTPProxyTestMockHandleHTTPValidationResults{b1}
	return e.mock
}

// HandleHTTPValidation implements HTTPProxyTest
func (mmHandleHTTPValidation *HTTPProxyTestMock) HandleHTTPValidation(w http.ResponseWriter, r *http.Request) (b1 bool) {
	mm_atomic.AddUint64(&mmHandleHTTPValidation.beforeHandleHTTPValidationCounter, 1)
	defer mm_atomic.AddUint64(&mmHandleHTTPValidation.afterHandleHTTPValidationCounter, 1)

	if mmHandleHTTPValidation.inspectFuncHandleHTTPValidation != nil {
		mmHandleHTTPValidation.inspectFuncHandleHTTPValidation(w, r)
	}

	mm_params := &HTTPProxyTestMockHandleHTTPValidationParams{w, r}

	// Record call args
	mmHandleHTTPValidation.HandleHTTPValidationMock.mutex.Lock()
	mmHandleHTTPValidation.HandleHTTPValidationMock.callArgs = append(mmHandleHTTPValidation.HandleHTTPValidationMock.callArgs, mm_params)
	mmHandleHTTPValidation.HandleHTTPValidationMock.mutex.Unlock()

	for _, e := range mmHandleHTTPValidation.HandleHTTPValidationMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1
		}
	}

	if mmHandleHTTPValidation.HandleHTTPValidationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmHandleHTTPValidation.HandleHTTPValidationMock.defaultExpectation.Counter, 1)
		mm_want := mmHandleHTTPValidation.HandleHTTPValidationMock.defaultExpectation.params
		mm_got := HTTPProxyTestMockHandleHTTPValidationParams{w, r}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmHandleHTTPValidation.t.Errorf("HTTPProxyTestMock.HandleHTTPValidation got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmHandleHTTPValidation.HandleHTTPValidationMock.defaultExpectation.results
		if mm_results == nil {
			mmHandleHTTPValidation.t.Fatal("No results are set for the HTTPProxyTestMock.HandleHTTPValidation")
		}
		return (*mm_results).b1
	}
	if mmHandleHTTPValidation.funcHandleHTTPValidation != nil {
		return mmHandleHTTPValidation.funcHandleHTTPValidation(w, r)
	}
	mmHandleHTTPValidation.t.Fatalf("Unexpected call to HTTPProxyTestMock.HandleHTTPValidation. %v %v", w, r)
	return
}

// HandleHTTPValidationAfterCounter returns a count of finished HTTPProxyTestMock.HandleHTTPValidation invocations
func (mmHandleHTTPValidation *HTTPProxyTestMock) HandleHTTPValidationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHandleHTTPValidation.afterHandleHTTPValidationCounter)
}

// HandleHTTPValidationBeforeCounter returns a count of HTTPProxyTestMock.HandleHTTPValidation invocations
func (mmHandleHTTPValidation *HTTPProxyTestMock) HandleHTTPValidationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHandleHTTPValidation.beforeHandleHTTPValidationCounter)
}

// Calls returns a list of arguments used in each call to HTTPProxyTestMock.HandleHTTPValidation.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmHandleHTTPValidation *mHTTPProxyTestMockHandleHTTPValidation) Calls() []*HTTPProxyTestMockHandleHTTPValidationParams {
	mmHandleHTTPValidation.mutex.RLock()

	argCopy := make([]*HTTPProxyTestMockHandleHTTPValidationParams, len(mmHandleHTTPValidation.callArgs))
	copy(argCopy, mmHandleHTTPValidation.callArgs)

	mmHandleHTTPValidation.mutex.RUnlock()

	return argCopy
}

// MinimockHandleHTTPValidationDone returns true if the count of the HandleHTTPValidation invocations corresponds
// the number of defined expectations
func (m *HTTPProxyTestMock) MinimockHandleHTTPValidationDone() bool {
	for _, e := range m.HandleHTTPValidationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.HandleHTTPValidationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterHandleHTTPValidationCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHandleHTTPValidation != nil && mm_atomic.LoadUint64(&m.afterHandleHTTPValidationCounter) < 1 {
		return false
	}
	return true
}

// MinimockHandleHTTPValidationInspect logs each unmet expectation
func (m *HTTPProxyTestMock) MinimockHandleHTTPValidationInspect() {
	for _, e := range m.HandleHTTPValidationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HTTPProxyTestMock.HandleHTTPValidation with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.HandleHTTPValidationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterHandleHTTPValidationCounter) < 1 {
		if m.HandleHTTPValidationMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to HTTPProxyTestMock.HandleHTTPValidation")
		} else {
			m.t.Errorf("Expected call to HTTPProxyTestMock.HandleHTTPValidation with params: %#v", *m.HandleHTTPValidationMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHandleHTTPValidation != nil && mm_atomic.LoadUint64(&m.afterHandleHTTPValidationCounter) < 1 {
		m.t.Error("Expected call to HTTPProxyTestMock.HandleHTTPValidation")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *HTTPProxyTestMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetContextInspect()

		m.MinimockHandleHTTPValidationInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *HTTPProxyTestMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *HTTPProxyTestMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetContextDone() &&
		m.MinimockHandleHTTPValidationDone()
}
