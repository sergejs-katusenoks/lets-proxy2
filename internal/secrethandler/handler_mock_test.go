package secrethandler

// Code generated by http://github.com/gojuno/minimock (3.0.6). DO NOT EDIT.

import (
	mm_http "net/http"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// HandlerMock implements http.Handler
type HandlerMock struct {
	t minimock.Tester

	funcServeHTTP          func(r1 mm_http.ResponseWriter, rp1 *mm_http.Request)
	inspectFuncServeHTTP   func(r1 mm_http.ResponseWriter, rp1 *mm_http.Request)
	afterServeHTTPCounter  uint64
	beforeServeHTTPCounter uint64
	ServeHTTPMock          mHandlerMockServeHTTP
}

// NewHandlerMock returns a mock for http.Handler
func NewHandlerMock(t minimock.Tester) *HandlerMock {
	m := &HandlerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ServeHTTPMock = mHandlerMockServeHTTP{mock: m}
	m.ServeHTTPMock.callArgs = []*HandlerMockServeHTTPParams{}

	return m
}

type mHandlerMockServeHTTP struct {
	mock               *HandlerMock
	defaultExpectation *HandlerMockServeHTTPExpectation
	expectations       []*HandlerMockServeHTTPExpectation

	callArgs []*HandlerMockServeHTTPParams
	mutex    sync.RWMutex
}

// HandlerMockServeHTTPExpectation specifies expectation struct of the Handler.ServeHTTP
type HandlerMockServeHTTPExpectation struct {
	mock   *HandlerMock
	params *HandlerMockServeHTTPParams

	Counter uint64
}

// HandlerMockServeHTTPParams contains parameters of the Handler.ServeHTTP
type HandlerMockServeHTTPParams struct {
	r1  mm_http.ResponseWriter
	rp1 *mm_http.Request
}

// Expect sets up expected params for Handler.ServeHTTP
func (mmServeHTTP *mHandlerMockServeHTTP) Expect(r1 mm_http.ResponseWriter, rp1 *mm_http.Request) *mHandlerMockServeHTTP {
	if mmServeHTTP.mock.funcServeHTTP != nil {
		mmServeHTTP.mock.t.Fatalf("HandlerMock.ServeHTTP mock is already set by Set")
	}

	if mmServeHTTP.defaultExpectation == nil {
		mmServeHTTP.defaultExpectation = &HandlerMockServeHTTPExpectation{}
	}

	mmServeHTTP.defaultExpectation.params = &HandlerMockServeHTTPParams{r1, rp1}
	for _, e := range mmServeHTTP.expectations {
		if minimock.Equal(e.params, mmServeHTTP.defaultExpectation.params) {
			mmServeHTTP.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmServeHTTP.defaultExpectation.params)
		}
	}

	return mmServeHTTP
}

// Inspect accepts an inspector function that has same arguments as the Handler.ServeHTTP
func (mmServeHTTP *mHandlerMockServeHTTP) Inspect(f func(r1 mm_http.ResponseWriter, rp1 *mm_http.Request)) *mHandlerMockServeHTTP {
	if mmServeHTTP.mock.inspectFuncServeHTTP != nil {
		mmServeHTTP.mock.t.Fatalf("Inspect function is already set for HandlerMock.ServeHTTP")
	}

	mmServeHTTP.mock.inspectFuncServeHTTP = f

	return mmServeHTTP
}

// Return sets up results that will be returned by Handler.ServeHTTP
func (mmServeHTTP *mHandlerMockServeHTTP) Return() *HandlerMock {
	if mmServeHTTP.mock.funcServeHTTP != nil {
		mmServeHTTP.mock.t.Fatalf("HandlerMock.ServeHTTP mock is already set by Set")
	}

	if mmServeHTTP.defaultExpectation == nil {
		mmServeHTTP.defaultExpectation = &HandlerMockServeHTTPExpectation{mock: mmServeHTTP.mock}
	}

	return mmServeHTTP.mock
}

//Set uses given function f to mock the Handler.ServeHTTP method
func (mmServeHTTP *mHandlerMockServeHTTP) Set(f func(r1 mm_http.ResponseWriter, rp1 *mm_http.Request)) *HandlerMock {
	if mmServeHTTP.defaultExpectation != nil {
		mmServeHTTP.mock.t.Fatalf("Default expectation is already set for the Handler.ServeHTTP method")
	}

	if len(mmServeHTTP.expectations) > 0 {
		mmServeHTTP.mock.t.Fatalf("Some expectations are already set for the Handler.ServeHTTP method")
	}

	mmServeHTTP.mock.funcServeHTTP = f
	return mmServeHTTP.mock
}

// ServeHTTP implements http.Handler
func (mmServeHTTP *HandlerMock) ServeHTTP(r1 mm_http.ResponseWriter, rp1 *mm_http.Request) {
	mm_atomic.AddUint64(&mmServeHTTP.beforeServeHTTPCounter, 1)
	defer mm_atomic.AddUint64(&mmServeHTTP.afterServeHTTPCounter, 1)

	if mmServeHTTP.inspectFuncServeHTTP != nil {
		mmServeHTTP.inspectFuncServeHTTP(r1, rp1)
	}

	mm_params := &HandlerMockServeHTTPParams{r1, rp1}

	// Record call args
	mmServeHTTP.ServeHTTPMock.mutex.Lock()
	mmServeHTTP.ServeHTTPMock.callArgs = append(mmServeHTTP.ServeHTTPMock.callArgs, mm_params)
	mmServeHTTP.ServeHTTPMock.mutex.Unlock()

	for _, e := range mmServeHTTP.ServeHTTPMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmServeHTTP.ServeHTTPMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmServeHTTP.ServeHTTPMock.defaultExpectation.Counter, 1)
		mm_want := mmServeHTTP.ServeHTTPMock.defaultExpectation.params
		mm_got := HandlerMockServeHTTPParams{r1, rp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmServeHTTP.t.Errorf("HandlerMock.ServeHTTP got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmServeHTTP.funcServeHTTP != nil {
		mmServeHTTP.funcServeHTTP(r1, rp1)
		return
	}
	mmServeHTTP.t.Fatalf("Unexpected call to HandlerMock.ServeHTTP. %v %v", r1, rp1)

}

// ServeHTTPAfterCounter returns a count of finished HandlerMock.ServeHTTP invocations
func (mmServeHTTP *HandlerMock) ServeHTTPAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServeHTTP.afterServeHTTPCounter)
}

// ServeHTTPBeforeCounter returns a count of HandlerMock.ServeHTTP invocations
func (mmServeHTTP *HandlerMock) ServeHTTPBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServeHTTP.beforeServeHTTPCounter)
}

// Calls returns a list of arguments used in each call to HandlerMock.ServeHTTP.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmServeHTTP *mHandlerMockServeHTTP) Calls() []*HandlerMockServeHTTPParams {
	mmServeHTTP.mutex.RLock()

	argCopy := make([]*HandlerMockServeHTTPParams, len(mmServeHTTP.callArgs))
	copy(argCopy, mmServeHTTP.callArgs)

	mmServeHTTP.mutex.RUnlock()

	return argCopy
}

// MinimockServeHTTPDone returns true if the count of the ServeHTTP invocations corresponds
// the number of defined expectations
func (m *HandlerMock) MinimockServeHTTPDone() bool {
	for _, e := range m.ServeHTTPMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServeHTTPMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServeHTTPCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServeHTTP != nil && mm_atomic.LoadUint64(&m.afterServeHTTPCounter) < 1 {
		return false
	}
	return true
}

// MinimockServeHTTPInspect logs each unmet expectation
func (m *HandlerMock) MinimockServeHTTPInspect() {
	for _, e := range m.ServeHTTPMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HandlerMock.ServeHTTP with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServeHTTPMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServeHTTPCounter) < 1 {
		if m.ServeHTTPMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to HandlerMock.ServeHTTP")
		} else {
			m.t.Errorf("Expected call to HandlerMock.ServeHTTP with params: %#v", *m.ServeHTTPMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServeHTTP != nil && mm_atomic.LoadUint64(&m.afterServeHTTPCounter) < 1 {
		m.t.Error("Expected call to HandlerMock.ServeHTTP")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *HandlerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockServeHTTPInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *HandlerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *HandlerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockServeHTTPDone()
}
