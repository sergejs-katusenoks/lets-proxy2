package metrics

// Code generated by http://github.com/gojuno/minimock (3.0.6). DO NOT EDIT.

//go:generate minimock -i github.com/sergejs-katusenoks/lets-proxy2/internal/metrics.loggerError -o ./logger_error_mock_test.go

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// LoggerErrorMock implements loggerError
type LoggerErrorMock struct {
	t minimock.Tester

	funcError          func(args ...interface{})
	inspectFuncError   func(args ...interface{})
	afterErrorCounter  uint64
	beforeErrorCounter uint64
	ErrorMock          mLoggerErrorMockError
}

// NewLoggerErrorMock returns a mock for loggerError
func NewLoggerErrorMock(t minimock.Tester) *LoggerErrorMock {
	m := &LoggerErrorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ErrorMock = mLoggerErrorMockError{mock: m}
	m.ErrorMock.callArgs = []*LoggerErrorMockErrorParams{}

	return m
}

type mLoggerErrorMockError struct {
	mock               *LoggerErrorMock
	defaultExpectation *LoggerErrorMockErrorExpectation
	expectations       []*LoggerErrorMockErrorExpectation

	callArgs []*LoggerErrorMockErrorParams
	mutex    sync.RWMutex
}

// LoggerErrorMockErrorExpectation specifies expectation struct of the loggerError.Error
type LoggerErrorMockErrorExpectation struct {
	mock   *LoggerErrorMock
	params *LoggerErrorMockErrorParams

	Counter uint64
}

// LoggerErrorMockErrorParams contains parameters of the loggerError.Error
type LoggerErrorMockErrorParams struct {
	args []interface{}
}

// Expect sets up expected params for loggerError.Error
func (mmError *mLoggerErrorMockError) Expect(args ...interface{}) *mLoggerErrorMockError {
	if mmError.mock.funcError != nil {
		mmError.mock.t.Fatalf("LoggerErrorMock.Error mock is already set by Set")
	}

	if mmError.defaultExpectation == nil {
		mmError.defaultExpectation = &LoggerErrorMockErrorExpectation{}
	}

	mmError.defaultExpectation.params = &LoggerErrorMockErrorParams{args}
	for _, e := range mmError.expectations {
		if minimock.Equal(e.params, mmError.defaultExpectation.params) {
			mmError.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmError.defaultExpectation.params)
		}
	}

	return mmError
}

// Inspect accepts an inspector function that has same arguments as the loggerError.Error
func (mmError *mLoggerErrorMockError) Inspect(f func(args ...interface{})) *mLoggerErrorMockError {
	if mmError.mock.inspectFuncError != nil {
		mmError.mock.t.Fatalf("Inspect function is already set for LoggerErrorMock.Error")
	}

	mmError.mock.inspectFuncError = f

	return mmError
}

// Return sets up results that will be returned by loggerError.Error
func (mmError *mLoggerErrorMockError) Return() *LoggerErrorMock {
	if mmError.mock.funcError != nil {
		mmError.mock.t.Fatalf("LoggerErrorMock.Error mock is already set by Set")
	}

	if mmError.defaultExpectation == nil {
		mmError.defaultExpectation = &LoggerErrorMockErrorExpectation{mock: mmError.mock}
	}

	return mmError.mock
}

//Set uses given function f to mock the loggerError.Error method
func (mmError *mLoggerErrorMockError) Set(f func(args ...interface{})) *LoggerErrorMock {
	if mmError.defaultExpectation != nil {
		mmError.mock.t.Fatalf("Default expectation is already set for the loggerError.Error method")
	}

	if len(mmError.expectations) > 0 {
		mmError.mock.t.Fatalf("Some expectations are already set for the loggerError.Error method")
	}

	mmError.mock.funcError = f
	return mmError.mock
}

// Error implements loggerError
func (mmError *LoggerErrorMock) Error(args ...interface{}) {
	mm_atomic.AddUint64(&mmError.beforeErrorCounter, 1)
	defer mm_atomic.AddUint64(&mmError.afterErrorCounter, 1)

	if mmError.inspectFuncError != nil {
		mmError.inspectFuncError(args...)
	}

	mm_params := &LoggerErrorMockErrorParams{args}

	// Record call args
	mmError.ErrorMock.mutex.Lock()
	mmError.ErrorMock.callArgs = append(mmError.ErrorMock.callArgs, mm_params)
	mmError.ErrorMock.mutex.Unlock()

	for _, e := range mmError.ErrorMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmError.ErrorMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmError.ErrorMock.defaultExpectation.Counter, 1)
		mm_want := mmError.ErrorMock.defaultExpectation.params
		mm_got := LoggerErrorMockErrorParams{args}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmError.t.Errorf("LoggerErrorMock.Error got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmError.funcError != nil {
		mmError.funcError(args...)
		return
	}
	mmError.t.Fatalf("Unexpected call to LoggerErrorMock.Error. %v", args)

}

// ErrorAfterCounter returns a count of finished LoggerErrorMock.Error invocations
func (mmError *LoggerErrorMock) ErrorAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmError.afterErrorCounter)
}

// ErrorBeforeCounter returns a count of LoggerErrorMock.Error invocations
func (mmError *LoggerErrorMock) ErrorBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmError.beforeErrorCounter)
}

// Calls returns a list of arguments used in each call to LoggerErrorMock.Error.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmError *mLoggerErrorMockError) Calls() []*LoggerErrorMockErrorParams {
	mmError.mutex.RLock()

	argCopy := make([]*LoggerErrorMockErrorParams, len(mmError.callArgs))
	copy(argCopy, mmError.callArgs)

	mmError.mutex.RUnlock()

	return argCopy
}

// MinimockErrorDone returns true if the count of the Error invocations corresponds
// the number of defined expectations
func (m *LoggerErrorMock) MinimockErrorDone() bool {
	for _, e := range m.ErrorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ErrorMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterErrorCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcError != nil && mm_atomic.LoadUint64(&m.afterErrorCounter) < 1 {
		return false
	}
	return true
}

// MinimockErrorInspect logs each unmet expectation
func (m *LoggerErrorMock) MinimockErrorInspect() {
	for _, e := range m.ErrorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LoggerErrorMock.Error with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ErrorMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterErrorCounter) < 1 {
		if m.ErrorMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LoggerErrorMock.Error")
		} else {
			m.t.Errorf("Expected call to LoggerErrorMock.Error with params: %#v", *m.ErrorMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcError != nil && mm_atomic.LoadUint64(&m.afterErrorCounter) < 1 {
		m.t.Error("Expected call to LoggerErrorMock.Error")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LoggerErrorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockErrorInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LoggerErrorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LoggerErrorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockErrorDone()
}
